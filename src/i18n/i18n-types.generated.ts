// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */
import type { BaseTranslation as BaseTranslationType, LocalizedString } from 'typesafe-i18n'

export type BaseTranslation = BaseTranslationType & DisallowNamespaces
export type BaseLocale = 'en'

export type Locales =
	| 'en'

export type Translation = RootTranslation & DisallowNamespaces

export type Translations = RootTranslation &
{
	app: NamespaceAppTranslation,
	common: NamespaceCommonTranslation,
	config: NamespaceConfigTranslation,
	home: NamespaceHomeTranslation,
	models: NamespaceModelsTranslation,
	sources: NamespaceSourcesTranslation,
	tasks: NamespaceTasksTranslation
}

type RootTranslation = {
	/**
	 * S​T​L​ ​O​r​g​a​n​i​z​e​r
	 */
	title: string
}

export type NamespaceAppTranslation = {
	navigation: {
		/**
		 * H​o​m​e
		 */
		home: string
		/**
		 * M​o​d​e​l​s
		 */
		models: string
		/**
		 * S​o​u​r​c​e​s
		 */
		sources: string
		/**
		 * T​a​s​k​s
		 */
		tasks: string
		/**
		 * C​o​n​f​i​g
		 */
		config: string
	}
}

export type NamespaceCommonTranslation = {
	actions: {
		/**
		 * C​a​n​c​e​l
		 */
		cancel: string
		/**
		 * S​a​v​e
		 */
		save: string
	}
}

export type NamespaceConfigTranslation = {
	/**
	 * C​o​n​f​i​g
	 */
	pageTitle: string
	errors: {
		/**
		 * F​a​i​l​e​d​ ​t​o​ ​u​p​d​a​t​e​ ​c​o​n​f​i​g
		 */
		failedUpdate: string
	}
	updateForm: {
		fields: {
			outputFolder: {
				/**
				 * O​u​t​p​u​t​ ​f​o​l​d​e​r
				 */
				label: string
				/**
				 * p​a​t​h​/​t​o​/​o​u​t​p​u​t​/​f​o​l​d​e​r
				 */
				placeholder: string
				errors: {
					/**
					 * O​u​t​p​u​t​ ​p​a​t​h​ ​i​s​ ​r​e​q​u​i​r​e​d
					 */
					required: string
					/**
					 * I​n​v​a​l​i​d​ ​o​u​t​p​u​t​ ​p​a​t​h
					 */
					invalid: string
				}
			}
			tempFolder: {
				/**
				 * T​e​m​p​ ​F​o​l​d​e​r
				 */
				label: string
				/**
				 * p​a​t​h​/​t​o​/​t​e​m​p​o​r​a​r​y​/​f​o​l​d​e​r
				 */
				placeholder: string
				errors: {
					/**
					 * T​e​m​p​ ​p​a​t​h​ ​i​s​ ​r​e​q​u​i​r​e​d
					 */
					required: string
					/**
					 * I​n​v​a​l​i​d​ ​t​e​m​p​ ​p​a​t​h
					 */
					invalid: string
				}
			}
			maxThreads: {
				/**
				 * M​a​x​ ​T​h​r​e​a​d​s
				 */
				label: string
				errors: {
					/**
					 * R​e​q​u​i​r​e​d​ ​a​t​ ​l​e​a​s​t​ ​1​ ​a​n​d​ ​u​p​ ​t​o​ ​6​ ​t​h​r​e​a​d​s
					 */
					required: string
				}
			}
			autoProcessOnScan: {
				/**
				 * A​u​t​o​ ​P​r​o​c​e​s​s​ ​o​n​ ​S​c​a​n
				 */
				label: string
				errors: {
				}
			}
			autoArchiveOnComplete: {
				/**
				 * A​u​t​o​ ​A​r​c​h​i​v​e​ ​o​n​ ​C​o​m​p​l​e​t​e
				 */
				label: string
				errors: {
				}
			}
			useMultithreading: {
				/**
				 * U​s​e​ ​M​u​l​t​i​t​h​r​e​a​d​i​n​g
				 */
				label: string
				errors: {
				}
			}
			debugMode: {
				/**
				 * D​e​b​u​g​ ​M​o​d​e
				 */
				label: string
				errors: {
				}
			}
		}
	}
}

export type NamespaceHomeTranslation = {
	/**
	 * H​o​m​e
	 */
	pageTitle: string
}

export type NamespaceModelsTranslation = {
	/**
	 * M​o​d​e​l​s
	 */
	pageTitle: string
}

export type NamespaceSourcesTranslation = {
	/**
	 * S​o​u​r​c​e​s
	 */
	pageTitle: string
	createForm: {
		/**
		 * C​r​e​a​t​e​ ​S​o​u​r​c​e
		 */
		title: string
		fields: {
			name: {
				/**
				 * N​a​m​e
				 */
				label: string
				/**
				 * S​h​o​r​t​ ​s​o​u​r​c​e​ ​n​a​m​e
				 */
				placeholder: string
				errors: {
					/**
					 * N​a​m​e​ ​i​s​ ​r​e​q​u​i​r​e​d
					 */
					required: string
					/**
					 * I​n​v​a​l​i​d​ ​c​h​a​r​a​c​t​e​r​s​ ​i​n​ ​n​a​m​e
					 */
					invalid: string
				}
			}
			path: {
				/**
				 * P​a​t​h
				 */
				label: string
				/**
				 * /​p​a​t​h​/​t​o​/​f​o​l​d​e​r
				 */
				placeholder: string
				errors: {
					/**
					 * P​a​t​h​ ​i​s​ ​r​e​q​u​i​r​e​d
					 */
					required: string
					/**
					 * I​n​v​a​l​i​d​ ​p​a​t​h
					 */
					invalid: string
				}
			}
			comment: {
				/**
				 * C​o​m​m​e​n​t
				 */
				label: string
				/**
				 * O​p​t​i​o​n​a​l​ ​d​e​s​c​r​i​p​t​i​o​n​.​.​.
				 */
				placeholder: string
			}
			isEnabled: {
				/**
				 * E​n​a​b​l​e​d
				 */
				label: string
			}
		}
	}
}

export type NamespaceTasksTranslation = {
	/**
	 * T​a​s​k​s
	 */
	pageTitle: string
}

export type Namespaces =
	| 'app'
	| 'common'
	| 'config'
	| 'home'
	| 'models'
	| 'sources'
	| 'tasks'

type DisallowNamespaces = {
	/**
	 * reserved for 'app'-namespace\
	 * you need to use the `./app/index.ts` file instead
	 */
	app?: "[typesafe-i18n] reserved for 'app'-namespace. You need to use the `./app/index.ts` file instead."

	/**
	 * reserved for 'common'-namespace\
	 * you need to use the `./common/index.ts` file instead
	 */
	common?: "[typesafe-i18n] reserved for 'common'-namespace. You need to use the `./common/index.ts` file instead."

	/**
	 * reserved for 'config'-namespace\
	 * you need to use the `./config/index.ts` file instead
	 */
	config?: "[typesafe-i18n] reserved for 'config'-namespace. You need to use the `./config/index.ts` file instead."

	/**
	 * reserved for 'home'-namespace\
	 * you need to use the `./home/index.ts` file instead
	 */
	home?: "[typesafe-i18n] reserved for 'home'-namespace. You need to use the `./home/index.ts` file instead."

	/**
	 * reserved for 'models'-namespace\
	 * you need to use the `./models/index.ts` file instead
	 */
	models?: "[typesafe-i18n] reserved for 'models'-namespace. You need to use the `./models/index.ts` file instead."

	/**
	 * reserved for 'sources'-namespace\
	 * you need to use the `./sources/index.ts` file instead
	 */
	sources?: "[typesafe-i18n] reserved for 'sources'-namespace. You need to use the `./sources/index.ts` file instead."

	/**
	 * reserved for 'tasks'-namespace\
	 * you need to use the `./tasks/index.ts` file instead
	 */
	tasks?: "[typesafe-i18n] reserved for 'tasks'-namespace. You need to use the `./tasks/index.ts` file instead."
}

export type TranslationFunctions = {
	/**
	 * STL Organizer
	 */
	title: () => LocalizedString
	app: {
		navigation: {
			/**
			 * Home
			 */
			home: () => LocalizedString
			/**
			 * Models
			 */
			models: () => LocalizedString
			/**
			 * Sources
			 */
			sources: () => LocalizedString
			/**
			 * Tasks
			 */
			tasks: () => LocalizedString
			/**
			 * Config
			 */
			config: () => LocalizedString
		}
	}
	common: {
		actions: {
			/**
			 * Cancel
			 */
			cancel: () => LocalizedString
			/**
			 * Save
			 */
			save: () => LocalizedString
		}
	}
	config: {
		/**
		 * Config
		 */
		pageTitle: () => LocalizedString
		errors: {
			/**
			 * Failed to update config
			 */
			failedUpdate: () => LocalizedString
		}
		updateForm: {
			fields: {
				outputFolder: {
					/**
					 * Output folder
					 */
					label: () => LocalizedString
					/**
					 * path/to/output/folder
					 */
					placeholder: () => LocalizedString
					errors: {
						/**
						 * Output path is required
						 */
						required: () => LocalizedString
						/**
						 * Invalid output path
						 */
						invalid: () => LocalizedString
					}
				}
				tempFolder: {
					/**
					 * Temp Folder
					 */
					label: () => LocalizedString
					/**
					 * path/to/temporary/folder
					 */
					placeholder: () => LocalizedString
					errors: {
						/**
						 * Temp path is required
						 */
						required: () => LocalizedString
						/**
						 * Invalid temp path
						 */
						invalid: () => LocalizedString
					}
				}
				maxThreads: {
					/**
					 * Max Threads
					 */
					label: () => LocalizedString
					errors: {
						/**
						 * Required at least 1 and up to 6 threads
						 */
						required: () => LocalizedString
					}
				}
				autoProcessOnScan: {
					/**
					 * Auto Process on Scan
					 */
					label: () => LocalizedString
					errors: {
					}
				}
				autoArchiveOnComplete: {
					/**
					 * Auto Archive on Complete
					 */
					label: () => LocalizedString
					errors: {
					}
				}
				useMultithreading: {
					/**
					 * Use Multithreading
					 */
					label: () => LocalizedString
					errors: {
					}
				}
				debugMode: {
					/**
					 * Debug Mode
					 */
					label: () => LocalizedString
					errors: {
					}
				}
			}
		}
	}
	home: {
		/**
		 * Home
		 */
		pageTitle: () => LocalizedString
	}
	models: {
		/**
		 * Models
		 */
		pageTitle: () => LocalizedString
	}
	sources: {
		/**
		 * Sources
		 */
		pageTitle: () => LocalizedString
		createForm: {
			/**
			 * Create Source
			 */
			title: () => LocalizedString
			fields: {
				name: {
					/**
					 * Name
					 */
					label: () => LocalizedString
					/**
					 * Short source name
					 */
					placeholder: () => LocalizedString
					errors: {
						/**
						 * Name is required
						 */
						required: () => LocalizedString
						/**
						 * Invalid characters in name
						 */
						invalid: () => LocalizedString
					}
				}
				path: {
					/**
					 * Path
					 */
					label: () => LocalizedString
					/**
					 * /path/to/folder
					 */
					placeholder: () => LocalizedString
					errors: {
						/**
						 * Path is required
						 */
						required: () => LocalizedString
						/**
						 * Invalid path
						 */
						invalid: () => LocalizedString
					}
				}
				comment: {
					/**
					 * Comment
					 */
					label: () => LocalizedString
					/**
					 * Optional description...
					 */
					placeholder: () => LocalizedString
				}
				isEnabled: {
					/**
					 * Enabled
					 */
					label: () => LocalizedString
				}
			}
		}
	}
	tasks: {
		/**
		 * Tasks
		 */
		pageTitle: () => LocalizedString
	}
}

export type Formatters = {}
